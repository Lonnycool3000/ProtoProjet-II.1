[
    {
        "id": "81d2c9e535491ee3",
        "type": "tab",
        "label": "Crafty_Bot 02",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1419c56904ba455a",
        "type": "inject",
        "z": "81d2c9e535491ee3",
        "name": "Api request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "50c70bfc3ff84011"
            ]
        ]
    },
    {
        "id": "184dfad371ee1849",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Format Discord Message",
        "func": "function formatDiscordMessage(msg) {\n    const data = msg.payload.data;\n    const serverInfo = data.server_id;\n\n    // Create an embed-friendly message\n    const embed = {\n        embeds: [{\n            title: `Server Status: ${serverInfo.server_name}`,\n            color: data.running ? 0x00FF00 : 0xFF0000, // Green if running, Red if not\n            fields: [\n                {\n                    name: \"üñ•Ô∏è Server Details\",\n                    value: `\n**Server ID:** \\`${serverInfo.server_id}\\`\n**IP:** ${serverInfo.server_ip}:${data.server_port}\n**Version:** ${data.version}\n**World:** ${data.world_name}\n                    `.trim(),\n                    inline: false\n                },\n                {\n                    name: \"üìä Performance\",\n                    value: `\n**CPU Usage:** ${data.cpu}%\n**Memory:** ${data.mem} (${data.mem_percent}%)\n                    `.trim(),\n                    inline: false\n                },\n                {\n                    name: \"üë• Players\",\n                    value: `\n**Online:** ${data.online}/${data.max}\n**Players:** ${data.players === '[]' ? 'None' : data.players}\n                    `.trim(),\n                    inline: false\n                }\n            ],\n            footer: {\n                text: `Last Started: ${data.started} | Status: ${data.running ? 'RUNNING' : 'STOPPED'}`\n            }\n        }]\n    };\n\n    // Prepare the message payload for Discord webhook\n    msg.payload = embed;\n    return msg;\n}\n\nreturn formatDiscordMessage(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 160,
        "wires": [
            [
                "79baedbfa8dbf2c8"
            ]
        ]
    },
    {
        "id": "50c70bfc3ff84011",
        "type": "http request",
        "z": "81d2c9e535491ee3",
        "name": "Get Server Stats Renny",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://minecraft.lennygodart.org/api/v2/servers/[serverid]/stats",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "bearer [API]"
            }
        ],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "184dfad371ee1849",
                "ad347dc884f4596a",
                "500d995a0b62bcb5"
            ]
        ]
    },
    {
        "id": "79baedbfa8dbf2c8",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Check for Message ID",
        "func": "let editingPaused = flow.get('editingPaused');\nif (editingPaused) {\n    node.warn('Editing is currently paused. Skipping update.');\n    return null;\n}\n\n// Abrufen der gespeicherten messageId aus dem Flow\nlet messageId = flow.get('messageId');\nnode.log(`Stored Message ID: ${messageId}`);  // Debugging: √úberpr√ºfen, ob die ID richtig abgerufen wird\n\n// Initialisierung der Components\nmsg.components = [\n    {\n        type: 1, // Action Row\n        components: []\n    }\n];\n\n// √úberpr√ºfen, ob der Footer \"RUNNING\" enth√§lt\nif (msg.payload.embeds && msg.payload.embeds[0] && msg.payload.embeds[0].footer && msg.payload.embeds[0].footer.text && msg.payload.embeds[0].footer.text.includes(\"RUNNING\")) {\n    // Wenn der Server l√§uft, f√ºge die Stop- und Neustart-Buttons hinzu\n    msg.components[0].components.push(\n        {\n            type: 2, // Button\n            label: \"Stop\", // Button-Text\n            style: 4, // Rote Farbe\n            custom_id: \"stop_server\" // Custom ID f√ºr den Button\n        },\n        {\n            type: 2, // Button\n            label: \"Neustart\", // Button-Text\n            style: 1, // Blaue Farbe\n            custom_id: \"restart_server\" // Custom ID f√ºr den Button\n        }\n    );\n} else {\n    // Wenn der Server nicht l√§uft, f√ºge den Start-Button hinzu\n    msg.components[0].components.push(\n        {\n            type: 2, // Button\n            label: \"Start\", // Button-Text\n            style: 3, // Gr√ºne Farbe\n            custom_id: \"start_server\" // Custom ID f√ºr den Button\n        }\n    );\n}\n\n// Definiere den Kanal, in dem die Nachricht gesendet wird\nmsg.channel = '1313469382696894536';  // Kanal-ID\n\n// Falls keine Interaktion, Nachricht erstellen oder bearbeiten\nif (!messageId) {\n    // Nachricht neu erstellen\n    if (!msg.payload || !msg.payload.embeds || msg.payload.embeds.length === 0) {\n        node.warn('Keine Embeds im msg.payload gefunden.');\n        return null;\n    }\n\n    msg.embeds = msg.payload.embeds;\n    msg.action = 'create';  // Nachricht erstellen\n} else {\n    // Nachricht bearbeiten\n    if (!msg.payload || !msg.payload.embeds || msg.payload.embeds.length === 0) {\n        node.warn('Keine Embeds im msg.payload f√ºr Bearbeitung gefunden.');\n        return null;\n    }\n\n    msg.message = messageId;  // Vorhandene Message-ID verwenden\n    msg.embeds = msg.payload.embeds;\n    msg.action = 'edit';  // Nachricht bearbeiten\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            [
                "3c9990d2f541d0cd"
            ]
        ]
    },
    {
        "id": "3c9990d2f541d0cd",
        "type": "discordMessageManager",
        "z": "81d2c9e535491ee3",
        "name": "Send Renny Status",
        "channel": "",
        "token": "",
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "486ef04f73e6ef76"
            ]
        ]
    },
    {
        "id": "486ef04f73e6ef76",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Store Message ID",
        "func": "if (msg.action === 'delete') {\n    node.log('Message deleted successfully.');\n    flow.set('messageId', null); // Nachricht-ID zur√ºcksetzen\n    flow.set('editingPaused', false); // Bearbeitung wieder aktivieren\n}\nif (msg.action === 'create' && msg.payload && msg.payload.id) {\n    // Speichern der Message-ID\n    flow.set('messageId', msg.payload.id);\n    node.log(`Message ID saved: ${msg.payload.id}`);\n} else if (msg.action === 'edit') {\n    node.log('Message edited successfully.');\n} else {\n    node.warn('No message ID received to store.');\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e1f8c23e75d5f26b",
        "type": "inject",
        "z": "81d2c9e535491ee3",
        "name": "reset messageID",
        "props": [
            {
                "p": "message",
                "v": "",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "d4cb51966ffcf925"
            ]
        ]
    },
    {
        "id": "d4cb51966ffcf925",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "reset ID",
        "func": "flow.set('messageId', null);  // L√∂scht MessageID\nnode.log('Message ID reset. A new message will be sent on the next run.');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "79baedbfa8dbf2c8"
            ]
        ]
    },
    {
        "id": "1ad8ae927382c733",
        "type": "catch",
        "z": "81d2c9e535491ee3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 200,
        "wires": [
            [
                "5cd69057ed9b51da"
            ]
        ]
    },
    {
        "id": "5cd69057ed9b51da",
        "type": "debug",
        "z": "81d2c9e535491ee3",
        "name": "Catch Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "8d35890321fb8027",
        "type": "inject",
        "z": "81d2c9e535491ee3",
        "name": "Initialize & Clear LCD",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "63b27b37d5ec4343"
            ]
        ]
    },
    {
        "id": "63b27b37d5ec4343",
        "type": "exec",
        "z": "81d2c9e535491ee3",
        "command": "python /home/lenny/digilab/lcd/init.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Init/Clear Script",
        "x": 400,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "19b7fcf8e6613b0c",
        "type": "exec",
        "z": "81d2c9e535491ee3",
        "command": "python /home/lenny/digilab/lcd/backlight.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Turning Backlight on",
        "x": 600,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "daee6a2aa261dcdf",
        "type": "rpi-gpio in",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "21",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 110,
        "y": 420,
        "wires": [
            [
                "e5f51773733d8f24"
            ]
        ]
    },
    {
        "id": "e5f51773733d8f24",
        "type": "switch",
        "z": "81d2c9e535491ee3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 420,
        "wires": [
            [
                "2cc6d6efe4c87d68"
            ],
            [
                "fc8cf317d8056631"
            ]
        ]
    },
    {
        "id": "2cc6d6efe4c87d68",
        "type": "change",
        "z": "81d2c9e535491ee3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "19b7fcf8e6613b0c"
            ]
        ]
    },
    {
        "id": "fc8cf317d8056631",
        "type": "change",
        "z": "81d2c9e535491ee3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "19b7fcf8e6613b0c"
            ]
        ]
    },
    {
        "id": "c50d5785258be484",
        "type": "template",
        "z": "81d2c9e535491ee3",
        "name": "Build Write Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": " --line \"{{line}}\" --message \"{{payload}}\"",
        "output": "str",
        "x": 820,
        "y": 240,
        "wires": [
            [
                "037428acf9bf902f"
            ]
        ]
    },
    {
        "id": "037428acf9bf902f",
        "type": "exec",
        "z": "81d2c9e535491ee3",
        "command": "python /home/lenny/digilab/lcd/write.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run Write Script",
        "x": 1020,
        "y": 240,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ad347dc884f4596a",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "function 4",
        "func": "msg.payload = msg.payload.data.server_id.server_name\nmsg.line = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "c50d5785258be484"
            ]
        ]
    },
    {
        "id": "ec3457f89332a01a",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "function 5",
        "func": "const data = msg.payload.data;\n\nconst status = data.running ? \"Started\" : \"Stopped\";\nconst online = data.online || 0;\nconst max = data.max || 20;\n\nmsg.payload = `${status}   ${online}I${max}`;\nmsg.line = 2\nmsg.topic\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "c50d5785258be484"
            ]
        ]
    },
    {
        "id": "500d995a0b62bcb5",
        "type": "delay",
        "z": "81d2c9e535491ee3",
        "name": "0.5s",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "ec3457f89332a01a",
                "2cf27caeffae6bc3"
            ]
        ]
    },
    {
        "id": "2cf27caeffae6bc3",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "function 6",
        "func": "const data = msg.payload.data;\nconst online = data.online || 0;\nmsg.payload = {online};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "4a90aa7d45462b47"
            ]
        ]
    },
    {
        "id": "83dd8c2f02a74589",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "27",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 300,
        "wires": []
    },
    {
        "id": "723845d70c948d56",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 340,
        "wires": []
    },
    {
        "id": "f2afb80d3c6b9f5c",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "17",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 380,
        "wires": []
    },
    {
        "id": "da0d81a9b565e145",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 420,
        "wires": []
    },
    {
        "id": "81b029215454b07e",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "15",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 460,
        "wires": []
    },
    {
        "id": "47483e8fb2a905e5",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "14",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 500,
        "wires": []
    },
    {
        "id": "30f6de73a1a4f7e3",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 540,
        "wires": []
    },
    {
        "id": "95f1fc5ef4087c7e",
        "type": "rpi-gpio out",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "50",
        "out": "out",
        "bcm": true,
        "x": 1720,
        "y": 580,
        "wires": []
    },
    {
        "id": "4a90aa7d45462b47",
        "type": "switch",
        "z": "81d2c9e535491ee3",
        "name": "",
        "property": "payload.online",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 890,
        "y": 480,
        "wires": [
            [
                "e17f9ff5d491157b"
            ],
            [
                "875ecade6293126b"
            ],
            [
                "3660c32f0871719c"
            ],
            [
                "eee25f3174cb51e3"
            ],
            [
                "4a6bb9fddabd67ca"
            ],
            [
                "53421a91a80d6237"
            ],
            [
                "3e73e9a3362360db"
            ],
            [
                "1491caca995241b9"
            ],
            [
                "8b4cebfb7a3d304f"
            ]
        ]
    },
    {
        "id": "875ecade6293126b",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "947054ac178167ea",
                "83dd8c2f02a74589"
            ]
        ]
    },
    {
        "id": "3660c32f0871719c",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "10a924fb3eb240c8",
                "f2afb80d3c6b9f5c",
                "83dd8c2f02a74589",
                "723845d70c948d56"
            ]
        ]
    },
    {
        "id": "eee25f3174cb51e3",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "be2928a0b29cd168",
                "83dd8c2f02a74589",
                "723845d70c948d56",
                "f2afb80d3c6b9f5c"
            ]
        ]
    },
    {
        "id": "4a6bb9fddabd67ca",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "81d54a43df404ee4",
                "83dd8c2f02a74589",
                "723845d70c948d56",
                "f2afb80d3c6b9f5c",
                "da0d81a9b565e145"
            ]
        ]
    },
    {
        "id": "53421a91a80d6237",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 460,
        "wires": [
            [
                "94aa0c288cce870d",
                "83dd8c2f02a74589",
                "723845d70c948d56",
                "f2afb80d3c6b9f5c",
                "da0d81a9b565e145",
                "81b029215454b07e"
            ]
        ]
    },
    {
        "id": "3e73e9a3362360db",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 500,
        "wires": [
            [
                "175bd595aa9c3838",
                "47483e8fb2a905e5",
                "81b029215454b07e",
                "da0d81a9b565e145",
                "f2afb80d3c6b9f5c",
                "723845d70c948d56",
                "83dd8c2f02a74589"
            ]
        ]
    },
    {
        "id": "1491caca995241b9",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "3df07d4dcdf7e6a9",
                "30f6de73a1a4f7e3",
                "47483e8fb2a905e5",
                "81b029215454b07e",
                "da0d81a9b565e145",
                "f2afb80d3c6b9f5c",
                "723845d70c948d56",
                "83dd8c2f02a74589"
            ]
        ]
    },
    {
        "id": "e17f9ff5d491157b",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 300,
        "wires": [
            [
                "83dd8c2f02a74589",
                "723845d70c948d56",
                "f2afb80d3c6b9f5c",
                "da0d81a9b565e145",
                "81b029215454b07e",
                "47483e8fb2a905e5",
                "95f1fc5ef4087c7e",
                "30f6de73a1a4f7e3"
            ]
        ]
    },
    {
        "id": "947054ac178167ea",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 340,
        "wires": [
            [
                "723845d70c948d56",
                "f2afb80d3c6b9f5c",
                "da0d81a9b565e145",
                "81b029215454b07e",
                "47483e8fb2a905e5",
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "10a924fb3eb240c8",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 380,
        "wires": [
            [
                "f2afb80d3c6b9f5c",
                "da0d81a9b565e145",
                "81b029215454b07e",
                "47483e8fb2a905e5",
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "be2928a0b29cd168",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 420,
        "wires": [
            [
                "81b029215454b07e",
                "47483e8fb2a905e5",
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e",
                "da0d81a9b565e145"
            ]
        ]
    },
    {
        "id": "81d54a43df404ee4",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 460,
        "wires": [
            [
                "81b029215454b07e",
                "47483e8fb2a905e5",
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "94aa0c288cce870d",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            [
                "47483e8fb2a905e5",
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "175bd595aa9c3838",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 540,
        "wires": [
            [
                "30f6de73a1a4f7e3",
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "8b4cebfb7a3d304f",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "1",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 580,
        "wires": [
            [
                "95f1fc5ef4087c7e",
                "30f6de73a1a4f7e3",
                "47483e8fb2a905e5",
                "81b029215454b07e",
                "da0d81a9b565e145",
                "f2afb80d3c6b9f5c",
                "723845d70c948d56",
                "83dd8c2f02a74589"
            ]
        ]
    },
    {
        "id": "3df07d4dcdf7e6a9",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "0",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "95f1fc5ef4087c7e"
            ]
        ]
    },
    {
        "id": "21b5117f5423668c",
        "type": "discordInteraction",
        "z": "81d2c9e535491ee3",
        "name": "Message Button",
        "token": "",
        "interactionType": "all",
        "custom_id": "",
        "commandResponse": "",
        "interactionObject": true,
        "ephemeral": false,
        "responseType": "update",
        "commandResponseType": "defersReply",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "f16b459c6d7cfaf9"
            ]
        ]
    },
    {
        "id": "f16b459c6d7cfaf9",
        "type": "switch",
        "z": "81d2c9e535491ee3",
        "name": "check for button",
        "property": "payload.customId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "stop_server",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "restart_server",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "start_server",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 340,
        "y": 680,
        "wires": [
            [
                "139c4113041dfcb0"
            ],
            [
                "9974002f57645fe0"
            ],
            [
                "53b9dcb17beace9d"
            ]
        ]
    },
    {
        "id": "139c4113041dfcb0",
        "type": "http request",
        "z": "81d2c9e535491ee3",
        "name": "Renny stop",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://minecraft.lennygodart.org/api/v2/servers/[serverid]/action/stop_server",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "bearer [API]"
            }
        ],
        "x": 550,
        "y": 640,
        "wires": [
            [
                "887f1ac895ea2016"
            ]
        ]
    },
    {
        "id": "887f1ac895ea2016",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Format output",
        "func": "// Pr√ºfe ob die Payload ein String ist und parse sie wenn n√∂tig\n// Abrufen der gespeicherten messageId aus dem Flow\nlet messageId = flow.get('messageId');\nlet data;\ntry {\n    data = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : msg.payload;\n} catch (error) {\n    msg.payload = \"‚ùå Fehler bei der Verarbeitung der Anfrage\";\n    return msg;\n}\n\n// Status√ºberpr√ºfung mit Discord-formatierter Nachricht\nif (data && data.status === \"ok\") {\n    msg.payload = \"‚úÖ **Server-Status**: Der Server wurde erfolgreich gestoppt!\";\n} else {\n    msg.payload = \"‚ùå **Server-Status**: Operation fehlgeschlagen - Bitte √ºberpr√ºfe den Server\";\n}\nmsg.message = messageId;  // Vorhandene Message-ID verw\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 640,
        "wires": [
            [
                "759db50b7d02fd04"
            ]
        ]
    },
    {
        "id": "9974002f57645fe0",
        "type": "http request",
        "z": "81d2c9e535491ee3",
        "name": "Renny restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://minecraft.lennygodart.org/api/v2/servers/[serverid]/action/restart_server",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "bearer [API]"
            }
        ],
        "x": 540,
        "y": 680,
        "wires": [
            [
                "faca53d18f102fc0"
            ]
        ]
    },
    {
        "id": "faca53d18f102fc0",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Format output",
        "func": "// Pr√ºfe ob die Payload ein String ist und parse sie wenn n√∂tig\n// Abrufen der gespeicherten messageId aus dem Flow\nlet messageId = flow.get('messageId');\nlet data;\ntry {\n    data = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : msg.payload;\n} catch (error) {\n    msg.payload = \"‚ùå Fehler bei der Verarbeitung der Anfrage\";\n    return msg;\n}\n\n// Status√ºberpr√ºfung mit Discord-formatierter Nachricht\nif (data && data.status === \"ok\") {\n    msg.payload = \"‚úÖ **Server-Status**: Der Server wurde erfolgreich neugestartet!\";\n} else {\n    msg.payload = \"‚ùå **Server-Status**: Operation fehlgeschlagen - Bitte √ºberpr√ºfe den Server\";\n}\nmsg.message = messageId;  // Vorhandene Message-ID verw\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 680,
        "wires": [
            [
                "759db50b7d02fd04"
            ]
        ]
    },
    {
        "id": "759db50b7d02fd04",
        "type": "discordMessageManager",
        "z": "81d2c9e535491ee3",
        "name": "Send Status Message",
        "channel": "",
        "token": "",
        "x": 940,
        "y": 680,
        "wires": [
            [
                "997471dd6e355572"
            ]
        ]
    },
    {
        "id": "29a476e0230d7bb7",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Format output",
        "func": "// Pr√ºfe ob die Payload ein String ist und parse sie wenn n√∂tig\n// Abrufen der gespeicherten messageId aus dem Flow\nlet messageId = flow.get('messageId');\nlet data;\ntry {\n    data = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : msg.payload;\n} catch (error) {\n    msg.payload = \"‚ùå Fehler bei der Verarbeitung der Anfrage\";\n    return msg;\n}\n\n// Status√ºberpr√ºfung mit Discord-formatierter Nachricht\nif (data && data.status === \"ok\") {\n    msg.payload = \"‚úÖ **Server-Status**: Der Server wurde erfolgreich gestartet!\";\n} else {\n    msg.payload = \"‚ùå **Server-Status**: Operation fehlgeschlagen - Bitte √ºberpr√ºfe den Server\";\n}\nmsg.message = messageId;  // Vorhandene Message-ID verw\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 720,
        "wires": [
            [
                "759db50b7d02fd04"
            ]
        ]
    },
    {
        "id": "53b9dcb17beace9d",
        "type": "http request",
        "z": "81d2c9e535491ee3",
        "name": "Renny start",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://minecraft.lennygodart.org/api/v2/servers/[serverid]/action/start_server",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "bearer [api]"
            }
        ],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "29a476e0230d7bb7"
            ]
        ]
    },
    {
        "id": "d18d42373fc7f9ef",
        "type": "delay",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1340,
        "y": 680,
        "wires": [
            [
                "e633a1efa8e5b9a9"
            ]
        ]
    },
    {
        "id": "34e2f79f4a14513c",
        "type": "discordMessageManager",
        "z": "81d2c9e535491ee3",
        "name": "Delete Message",
        "channel": "",
        "token": "",
        "x": 1740,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "e633a1efa8e5b9a9",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Retrieve MessageID",
        "func": " // Abrufen der gespeicherten messageId aus dem Flow\nlet messageId = flow.get('messageId_1');\nnode.log(`Stored Message ID: ${messageId}`);  // Debugging: √úberpr√ºfen, ob die ID richtig abgerufen wird\n\nmsg.message = messageId;\nmsg.action = \"delete\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 680,
        "wires": [
            [
                "34e2f79f4a14513c"
            ]
        ]
    },
    {
        "id": "997471dd6e355572",
        "type": "function",
        "z": "81d2c9e535491ee3",
        "name": "Store Message ID",
        "func": "if (msg.action === 'create' && msg.payload && msg.payload.id) {\n    // Speichern der Message-ID\n    flow.set('messageId_1', msg.payload.id);\n    node.log(`Message ID saved: ${msg.payload.id}`);\n} else if (msg.action === 'edit') {\n    node.log('Message edited successfully.');\n} else {\n    node.warn('No message ID received to store.');\n}\nif (msg.payload && msg.payload.id) {\n    flow.set('messageId_1', msg.payload.id);\n    node.log(`Message ID saved: ${msg.payload.id}`);\n} else {\n    node.warn('No message ID found in payload.');\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "d18d42373fc7f9ef"
            ]
        ]
    },
    {
        "id": "95d011c41243ed4c",
        "type": "rpi-gpio in",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "19",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "53b9dcb17beace9d"
            ]
        ]
    },
    {
        "id": "301fe6ce6a46bd34",
        "type": "rpi-gpio in",
        "z": "81d2c9e535491ee3",
        "name": "",
        "pin": "16",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 370,
        "y": 640,
        "wires": [
            [
                "139c4113041dfcb0"
            ]
        ]
    }
]